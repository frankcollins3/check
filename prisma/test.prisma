// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

  model users {
  id                  Int      @id @default(autoincrement())
  location_name       String?      
  mod_id              Int?           
  username            String  
  last_change         DateTime?      
  full_name           String?
  profile_picture     String?
  cover_photo         String?
  password            String 
  email               String
  age                 Int     
  ballot_title        String? 
  gender              String?
  orientation         String?
  ethnicity           String?
  role                String?
  no_ads              Boolean?     
  app_anims           Boolean? 

  days                days[] @relation("userDays")
  fields_id           fields[] @relation("userFields")
  images              images[] @relation("userImages")
  thoughts            thoughts[] @relation("userThoughts")
  greatfullagain      greatfullagain[] @relation("userGreatfullagain")    
  privacy             privacy @relation("userPrivacy")       
  followers           followers[] @relation("userFollowers")      
  following           followers[] @relation("userFolowing")      
  ballot              ballots @relation("userBallot") 
  blocks              blocks[] @relation("userBlocks")
  blocked             blocks[] @relation("blockedUsers")
  likes               likes[]  @relation("userLikes")
  stars               stars[]  @relation("userStars")
  listeners           listeners[] @relation("userListeners")
                                        
  shares              shares[] @relation("userShares") 
  reactions           reactions[] @relation("userReactions")

  fromNotifications       notifications[] @relation("userFromNotifications") 
  forNotifications       notifications[] @relation("userForNotifications")

  forMessages            messages[] @relation("userForMessages") 
  fromMessages            messages[] @relation("userFromMessages") 

  from_me_pay         users[] @relation("fromUserPayments")
  for_me_pay          users[] @relation("forUserPayments")

  from_me_prank       pranks[] @relation("userPranks")
  for_me_prank        pranks[] @relation("userPranked")

  algo_settings       algo_settings[] @relation("userAlgoSettings")

  location            locations? @relation("locationUsers", fields: [location_name], references: [nickname])
  mod                 mods? @relation("modUsers", fields: [mod_id], references: [user_id]) 

  avg_likes           Int?
  avg_comments        Int?
  daily_scrolling     Int?
  avg_scrolling       Int?
  avg_shares          Int?
  total_posts         Int?
  total_followers     Int?
  total_following     Int?
  trash_u_today       Int?       
  trash_me_today      Int?      
  trash_me_30         Int?

  vibe_u_today        Int?
  last_vibe_gift      DateTime?
  spam_percent        Int?

  reported_posts      Int? 
  sus_start_date      DateTime?
  has_reported        Int?  

  explicit_posts      Int?
  has_marked_exp      Int? 
  thought_limit       Int? 
  comment_limit       Int?  
}

model days {            
  id                  Int      @id @default(autoincrement())
  user_id             Int     
  category_name       String?
  location_name       String?    
  lock_id             Int?
  report_id           Int?  
  feedgame_id         Int?
  title               String?  
  caption             String?
  
  non_anonymous       String  
  thoughts_ok         String             
  shareable           String     
  downloadable        String     

  is_reported         Boolean?    
  rlly                String?     
  feedface            String 
  timestamp           String     
  date                DateTime?
  lock_restriction    String?
  lock_activity       String?
  sus_content         Boolean

  images              images[] @relation("dayImages")
  fields              fields @relation("dayFields")
  greatfullagain      greatfullagain[] @relation("dayGreatfullagain") 
  thoughts            thoughts[] @relation("dayThoughts") 
  moments             moments[] @relation("dayMoments") 
  likes               likes[]  @relation("dayLikes") 
  reactions           reactions[] @relation("dayReactions")
  listeners           listeners[] @relation("dayListeners")
  notifications       notifications[] @relation("dayNotifications")
  showSus             show_sus_content_users[] @relation("dayShowSusUsers")
  ballot              ballots? @relation("dayBallot")

  
  user                users  @relation("userDays", fields: [user_id], references: [id])  

  category            categories?  @relation("categoryDays", fields: [category_name], references: [name]) 
  location            locations? @relation("locationDays", fields: [location_name], references: [nickname])
  payments            payments? @relation("dayPayments")
  report              reported_content? @relation("reportDays", fields: [report_id], references: [id])    
  feedgame            feedgames? @relation("modelFeedgames", fields: [feedgame_id], references: [id])

  sleep_id            Int?
  were_id             Int?
}

model user_pass_day_locks {      
  id                Int      @id @default(autoincrement())
  day_id            Int
  user_id           Int
  timestamp         DateTime    
}

model thoughts {          
  id                  Int      @id @default(autoincrement())
  user_id             Int?
  day_id              Int?
  category_id         String?
  parent_thought_id   Int?     
  moment_id           Int?
  greatfullagain_id   Int?
  field_id            Int?
  habit_id            Int?
  location_name       String?
  sus_content_id      Int?
  suggestion_id       Int?
  meme_id             Int?
  title               String?
  thought             String

  non_anonymous       String
  downloadable        String
  starrable           String    
  thoughts_ok         String
  
  is_reported         Boolean?           
  date                String?
  on_profile          String?            
  timestamp           DateTime

  user                users?  @relation("userThoughts", fields: [user_id], references: [id])   
  days                days? @relation("dayThoughts", fields: [day_id], references: [id])      
  location            locations? @relation("locationThoughts", fields: [location_name], references: [nickname])

  parent_thought      thoughts? @relation("parentThoughts", fields: [parent_thought_id], references: [id])
  child_thoughts      thoughts[] @relation("parentThoughts")

  notification        notifications[] @relation("thoughtNotifications")

  moment              moments? @relation("momentThoughts", fields: [moment_id], references: [id])
  greatfullagain      greatfullagain? @relation("greatfullagainThoughts", fields: [greatfullagain_id], references: [id])
  field               fields? @relation("fieldThoughts", fields: [field_id], references: [id])
  suggestion          suggestions? @relation("suggestionThoughts", fields: [suggestion_id], references: [id])

  stars               stars[]  @relation("thoughtStars") 
}

model moments {       
  id                  Int      @id @default(autoincrement())
  user_id             Int?   
  day_id              Int?
  title               String[]
  moments             String[]
  edits               String[]
  on_profile          String?
  timestamp           DateTime
  
  day                 days? @relation("dayMoments", fields: [day_id], references: [id])
  thought             thoughts[] @relation("momentThoughts") 
  notification        notifications[] @relation("momentNotifications")
}

model greatfullagain {     
  id                  Int      @id @default(autoincrement())
  user_id             Int?     
  day_id              Int?     
  words               String[]

  cqc_one             String?
  cqc_two             String?
  cqc_three           String?

  zoom_in             String?      
  zoom_out            String?      
  greatfull           String[]    
  
  on_profile          String?
  timestamp           DateTime
  
  user                users? @relation("userGreatfullagain", fields: [user_id], references: [id])
  day                 days? @relation("dayGreatfullagain", fields: [day_id], references: [id])   

  concerns            concerns[] @relation("greatfullagainConcern")     
  questions           questions[] @relation("greatfullagainQuestion")   
  criticisms          criticisms[] @relation("greatfullagainCriticism")                         
  thoughts            thoughts[] @relation("greatfullagainThoughts")         
}

model fields {                                                                                                                       
  id                  Int      @id @default(autoincrement())
  user_id             Int? 
  day_id              Int? 
  decidedo_id         Int? 
  fields              String[]     
  check               Boolean[]    
  text                String[]     
  decide_post         String?     
  decide_do           String?    
  likeable            String
  thoughts_ok         String      
  on_profile          String?    
  timestamp           DateTime      
  
  user                users? @relation("userFields", fields: [user_id], references: [id])
  day                 days? @relation("dayFields", fields: [day_id], references: [id])

  like                likes[] @relation("fieldLikes")
  share               shares[] @relation("fieldShares")     
  thoughts            thoughts[] @relation("fieldThoughts")
  habits              habits[] @relation("fieldHabits")
  values              values[] @relation("fieldValues") 
  decidedo            decidedo? @relation("fieldDecideDo", fields: [decidedo_id], references: [id])  

  algo_settings       algo_settings? @relation("fieldAlgosettings")
}

model concerns {
  id                  Int      @id @default(autoincrement())
  greatfullagain_id   Int
  ballot_id           Int?
  habit               Int?
  value               Int?
  concern             String
  timestamp           DateTime

  greatfullagain      greatfullagain @relation("greatfullagainConcern", fields: [greatfullagain_id], references: [id]) 
  ballot              ballots? @relation(fields: [ballot_id], references: [id])
  habits              habits? @relation(fields: [habit], references: [habit])
  values              values? @relation(fields: [value], references: [value])

  algo_settings       algo_settings? @relation("concernAlgosettings")
}

model questions {
  id                  Int      @id @default(autoincrement())
  greatfullagain_id   Int
  ballot_id           Int?
  habit               Int
  value_id            Int
  question            String
  timestamp           DateTime

  greatfullagain      greatfullagain @relation("greatfullagainQuestion", fields: [greatfullagain_id], references: [id]) 
  ballot              ballots? @relation(fields: [ballot_id], references: [id])
  habits              habits? @relation(fields: [habit], references: [habit])
  values              values? @relation(fields: [value_id], references: [value])
  algo_settings       algo_settings? @relation("questionAlgosettings")
}

model criticisms {
  id                  Int      @id @default(autoincrement())
  greatfullagain_id   Int
  ballot_id           Int?
  habit               Int
  value_id            Int
  criticism           String    
  timestamp           DateTime
  
  greatfullagain      greatfullagain @relation("greatfullagainCriticism", fields: [greatfullagain_id], references: [id])
  ballot              ballots? @relation(fields: [ballot_id], references: [id])
  habits              habits? @relation(fields: [habit], references: [habit])
  values              values? @relation(fields: [value_id], references: [value])
  algo_settings       algo_settings? @relation("criticismAlgosettings")
}

model decidedo {        
  id                  Int      @id @default(autoincrement())
  fields_id           Int
  decide              String
  do                  String      
  zoom_in             String?      
  zoom_out            String?     

  field               fields @relation("fieldDecideDo",fields: [fields_id], references: [id])  
}

model payments {      
  id                  Int      @id @default(autoincrement())
  from_user_id        Int
  for_user_id         Int?
  day_id              Int?
  location_name       String
  last_4              Int
  ip_addy             String  
  timestamp           DateTime
  notes               String        
  amount              Int
  currency            String

  from_me             users @relation("fromUserPayments", fields: [from_user_id], references: [id])
  for_me              users? @relation("forUserPayments", fields: [for_user_id], references: [id])
  day                 days?  @relation("dayPayments", fields: [day_id], references: [id])
  location            locations @relation(fields: [location_name], references: [id])
  notification        notifications @relation("paymentNotifications")
}

model pranks {
  id                  Int      @id @default(autoincrement())
  pranked_by_id       Int  
  pranked_user_id     Int
  day_id              Int? 
  prank               String  
  active              Boolean  
  timestamp           DateTime

  prankster           users @relation("userPranks", fields: [pranked_by_id], references: [id])
  pranked             users? @relation("userPranked", fields: [pranked_user_id], references: [id])

  day                 days? @relation("dayPranks", fields: [day_id], references: [id])
  notification        notifications @relation("prankNotifications")
}

model algo_settings {     
  id                  Int      @id @default(autoincrement())
  user_id             Int      
  hash_tag            String?
  location_name       String
  layout              String? 
  concern_id          Int?
  question_id         Int?
  criticism_id        Int?
  field_id            Int?

  gender              String? 
  engaged_percent     Int? 
  verified            String?
  trash_percent       Int?
  reactions           String? 
  timestamp           String 
  anonymous_percent   Int? 
  is_anonymous        String?
  after_join_date     DateTime?
  post_percent        Int?       
  feedgame_percent    Int?    
  spam_percent        Int?

  locations           String?

  user                users @relation(fields: [user_id], references: [id])
  hashtag             hashtags @relation(fields: [hash_tag], references: [tag])
  location            locations @relation(fields: [location_name], references: [nickname])
  concern             concerns @relation("concernAlgosettings", fields: [concern_id], references: [id])
  question            questions @relation("questionAlgosettings", fields: [question_id], references: [id])
  criticism           criticisms @relation("criticismAlgosettings", fields: [criticism_id], references: [id])
  field               fields @relation(fields: [field_id], references: [id])
}

model hashtags {        
  id                  Int      @id @default(autoincrement())
  tag                 String? 
  location_id         String? 
  no_db_loc           String?  

  timestamp           DateTime?

  algo_settings       algo_settings? @relation("hashtagAlgosettings")
  location            locations? @relation(fields: [location_id], references: [id])
}


model locations {   
  id                  Int      @id @default(autoincrement())
  nickname            String?  @unique
  city                String?
  country             String?
  zip_codes           String? 
  user                users[] @relation("locationUsers")
  day                 days[] @relation("locationDays")
  thought             thoughts[] @relation("locationThoughts")
  payment             payments? @relation("locationPayments")
  hashtags            hashtags? @relation("locationHashtags")
  
  algo_settings       algo_settings? @relation("locationAlgosettings")
}

model zipcodes {
  id                  Int      @id @default(autoincrement())
  location_id         Int
  zipcodes            Int 
}

model listeners {
  id                  Int      @id @default(autoincrement())
  day_id              Int
  user_id             Int
  timestamp           DateTime 

  day                 days @relation("dayListeners", fields: [day_id], references: [id])
  user                users @relation(fields: [user_id], references: [id])  
}

model vibes {        
  id                 Int      @id @default(autoincrement())
  for_user           Int
  from_user          Int
  day_id             Int
  timestamp          DateTime

  notification       notifications? @relation("vibeNotifications") 
}

model images {
  id                 Int      @id @default(autoincrement())
  user_id            Int?
  day_id             Int?
  image_tag          String

  user               users? @relation("userImages", fields: [user_id], references: [id])  
  day                days? @relation("dayImages", fields: [day_id], references: [id])
}

model followers {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  follower_id        Int
  timestamp          DateTime
  user               users  @relation("userFollowers", fields: [user_id], references: [id])
  follower           users  @relation("userFollowing", fields: [follower_id], references: [id])  

  notification       notifications? @relation("followersNotifications")
}

model likes {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  day_id             Int?
  thought_id         Int?
  value_id           Int?
  feedgame_id        Int?
  message_id         Int?
  field_id           Int?
  habit              String?

  like               Boolean?
  dislike            Boolean?
  rlly               String? 
  timestamp          String

  user               users @relation("userLikes", fields: [user_id], references: [id])    
  days               days? @relation("dayLikes", fields: [day_id], references: [id])      
  values             values? @relation(fields: [value_id], references: [value])
  
  feedgame           feedgames @relation(fields: [feedgame_id], references: [id])
  message            messages @relation(fields: [message_id], references: [id])  
  field              fields @relation("fieldLikes", fields: [field_id], references: [id])
  habits             habits @relation("fieldHabits", fields: [habit], references: [habit])

  notification       notifications @relation("likeNotifications")
}

model stars {
  id                 Int      @id @default(autoincrement())
  user_id            Int?
  thought_id         Int?
  message_id         Int?
  suggestion_id      Int?

  stars              Int
  timestamp          String
  user               users @relation("userStars", fields: [user_id], references: [id])
  thought            thoughts? @relation("thoughtStars", fields: [thought_id], references: [id])
  message            messages? @relation("messageStars", fields: [message_id], references: [id])
  suggestion         suggestions? @relation("suggestionStars", fields: [suggestion_id], references: [id])
  notification       notifications? @relation("starNotifications")  
}

model reactions {
  id                 Int      @id @default(autoincrement())
  user_id            Int?
  day_id             Int?
  feedgame_id        Int?
  message_id         Int?
  value_id           Int?
  habit_id           Int?
  meme_id            Int?
  
  reaction           String  
  timestamp          String
  user               users  @relation("userReactions", fields: [user_id], references: [id])
  day                days? @relation("dayReactions", fields: [day_id], references: [id])
  feedgame           feedgames? @relation("feedgameReactions", fields: [feedgame_id], references: [id])
  message            messages? @relation("messageReactions", fields: [message_id], references: [id])  

  notification       notifications? @relation("reactionNotifications")
}

model categories {    
  name         String   @id
  timestamp    DateTime
  mods         mods[] @relation("categoryMods")
  day          days[] @relation("categoryDays")
}

model mods {
  id                Int      @id @default(autoincrement())
  category_name     Int
  user_id           Int  
  timestamp         DateTime

  category          categories @relation("categoryMods", fields: [category_name], references: [name])
  user              users @relation("modUsers") 
}

model privacy {         
  id                Int      @id @default(autoincrement())
  user_id           Int                
  private           Boolean
  share_data        Boolean?
  prankable         Boolean?      
  opt_in_feedgame   Boolean?   
  show_history      Boolean     

  users             users @relation("userPrivacy", fields: [user_id], references: [id])  
}

model reported_content {
  id                Int      @id @default(autoincrement())
  reported_user     Int?

  day_id            Int?
  thought_id        Int?
  why               String?
  status            String?
  notes             String?
  timestamp         String

  notification      notifications? @relation("reportNotifications") 
}

model show_sus_content_users {       
  id                Int      @id @default(autoincrement())
  sus_content_id    Int
  scroll_user_id    Int
  timestamp         DateTime

  user              users @relation(fields: [scroll_user_id], references: [id])
  sus_content       days @relation("dayShowSusUsers", fields: [sus_content_id], references: [id])
}

model blocks {
  id                Int      @id @default(autoincrement())
  user_id           Int
  blocked_id        Int
  feedback          String?
  notes             String?  

  user              users  @relation("userBlocks", fields: [user_id], references: [id])
  blocked           users  @relation("blockedUsers", fields: [blocked_id], references: [id])
}

model notifications {
  id                Int      @id @default(autoincrement())
  from_user_id      Int
  for_user_id       Int
  day_id            Int?
  thought_id        Int?
  moment_id         Int?
  like_id           Int?
  star_id           Int?
  reaction_id       Int?

  vibe_id           Int?
  payment_id        Int?
  prank_id          Int?
  follower_id       Int?
  report_id         Int?
  feedgame_id       Int?
  share_id          Int?
  
  favorite_id       Int

  is_read           Boolean
  is_request        Boolean
  type              String 
  timestamp         String

  from              users  @relation("userFromNotifications", fields: [from_user_id], references: [id])
  for               users  @relation("userForNotifications", fields: [for_user_id], references: [id])

  day               days? @relation("dayNotifications", fields: [day_id], references: [id])
  thought           thoughts  @relation("thoughtNotifications", fields: [thought_id], references: [id])
  moment            moments?  @relation("momentNotifications", fields: [moment_id], references: [id])
  like              likes? @relation("likeNotifications", fields: [like_id], references: [id])
  star              stars? @relation("starNotifications", fields: [star_id], references: [id])
  reaction          reactions? @relation(fields: [reaction_id], references: [id])
  vibe              vibes? @relation(fields: [vibe_id], references: [id])
  payment           payments? @relation("paymentNotifications", fields: [payment_id], references: [id])
  prank             pranks? @relation("prankNotifications", fields: [prank_id], references: [id])
  follower          followers? @relation(fields: [follower_id], references: [id])
  report            reported_content? @relation("reportNotifications", fields: [report_id], references: [id])
  feedgame          feedgames? @relation(fields: [feedgame_id], references: [id])
  share             shares? @relation(fields: [share_id], references: [id])
}

model messages {
  id                Int      @id @default(autoincrement())
  user_id           Int
  from_id           Int
  msg               String
  timestamp         String
  notification      notifications[] @relation("messageNotifications")
  reaction          reactions[] @relation("messageReactions")
  
  like              likes[] @relation("messageLikes")
  stars             stars[] @relation("messageStars")

  user              users  @relation("userForMessages", fields: [user_id], references: [id])
  from              users  @relation("userFromMessages", fields: [from_id], references: [id])
}

model feedgames {
  id                Int      @id @default(autoincrement())
  gametype          String

  thought           thoughts[] @relation("feedgameThoughts")
  like              likes[] @relation("feedgameLikes")              
  reaction          reactions[] @relation("feedgameReactions")       

  day               days @relation("feedgameDays")    
  notification      notifications? @relation("feedgameNotifications")  
  ballot            ballots @relation("feedgameBallot") 
}

model shares {
  id                Int      @id @default(autoincrement())
  day_id            Int?
  thought_id        Int?
  field_id          Int?
  sharer_id         Int
  timestamp         DateTime

  day               days[] @relation(fields:[day_id], references: [id])
  thought           thoughts[] @relation(fields: [thought_id], references: [id])
  field             fields[] @relation(fields: [field_id], references: [id])
  sharing_user      users[] @relation(fields:[sharer_id], references: [id])
  
  notification      notifications @relation("shareNotifications") 
}

model habits {       
    habit           String   @id
    field_id        Int
    timestamp       DateTime
    
    field           fields @relation(fields: [field_id], references: [id])   
    concerns        concerns[] @relation("habitConcerns")
    questions       questions[] @relation("habitQuestions")
    criticisms      criticisms[] @relation("habitCriticisms")
    ballot          ballots[] @relation("habitBallot")
}

model user_habits {
    user_id         Int
    habit           String
    disarm          String?
    start           String?    
    notes           String?
    timestamp       DateTime
}

model values {             
    value           String @id         
    field_id        Int
    timestamp       DateTime

    field           fields @relation(fields: [field_id], references: [id])
    concerns        concerns[] @relation("valueConcerns")    
    questions       questions[] @relation("valueQuestions")    
    criticisms      criticisms[] @relation("valueCriticisms")
}

model user_values {
    user_id     Int
    value       String       
    notes       String?    
    timestamp   DateTime
}

model suggestions {
    id              Int       @id @default(autoincrement())
    suggested_by    Int
    suggestion      String
    notes           String?
    non_anonymous   String
    timestamp       DateTime
    
    user            users @relation(fields: [suggested_by], references: [id])
    
    thought         thoughts[] @relation("suggestionThoughts")
    stars           stars[] @relation("suggestionStars")
    ballot          ballots @relation("suggestionBallot")    
}

model ballots {
    id              Int       @id @default(autoincrement())
    feedgames_id    Int?
    day_id          Int?
    suggestion_id   Int?
    started_by_id   Int?
    title           String     
    description     String?
    decision        String?
    notes           String?
    option          String?
    options         String[]
    timestamp       DateTime
    vote            votes @relation("ballotVotes")
    concern         concerns? @relation("ballotConcerns")
    question        questions? @relation("ballotQuestions")
    criticism       criticisms? @relation("ballotCriticisms")    
    suggestion      suggestions? @relation("userBallot", fields: [suggestion_id], references: [id])
    feedgames       feedgames? @relation(fields: [feedgames_id], references: [id])
    day             days? @relation("dayBallot", fields: [day_id], references: [id])

    user            users @relation(fields: [started_by_id], references: [id])
}

model votes {  
  id                Int       @id @default(autoincrement())
  ballot_id         Int?
  user_id           Int    
  feedgame_id       Int?
  vote              String 
  timestamp         DateTime
  
  ballot            ballots @relation(fields: [ballot_id], references: [id])
  feedgame          feedgames @relation(fields: [feedgame_id], references: [id]) 
}

model hashtagged_content {
  id                Int      @id @default(autoincrement())    
  user_id           Int
  hash_tag          Int
  day_id            Int?
  thought_id        Int?
  category          String?
  timestamp         DateTime
}

model trash {
  id                Int      @id @default(autoincrement())  
  user_id           Int
  day_id            Int?
  thought_id        Int?
  timestamp         DateTime  
  total             Int  
 }

model user_play_feed_games {
  id                Int      @id @default(autoincrement())
  feedgames_id  Int
  playing_user_id   Int
  user_1_id         Int?
  user_2_id         Int?
  user_3_id         Int?
  user_4_id         Int?
  day_1_id          Int?
  day_2_id          Int? 
  day_3_id          Int?
  day_4_id          Int?
  option_a          String?
  option_b          String?
  option_c          String?
  option_d          String?
  right_answer      String
  wrong_guess       Int
  result            String?

  playing_user      users? @relation(fields: [playing_user_id])
  feedgame          feedgames @relation(fields: [feedgames_id], references: [id])
} 