// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                  Int      @id @default(autoincrement())
  location_id         Int?      
  username            String   @unique        
  last_change         DateTime?      
  full_name           String?
  profile_picture     String?
  icon                String
  cover_photo         String?
  password            String 
  email               String   @unique
  age                 Int     
  ballot_title        String? 
  gender              String?
  orientation         String?
  ethnicity           String?
  role                String?
  no_ads              Boolean?     
  app_anims           Boolean? 

  avg_likes           Int?
  avg_comments        Int?
  daily_scrolling     Int?
  avg_scrolling       Int?
  avg_shares          Int?
  total_posts         Int?
  total_followers     Int?
  total_following     Int?
  trash_u_today       Int?       
  trash_me_today      Int?
  trash_u_30          Int?      
  trash_me_30         Int?

  vibe_u_today        Int?
  last_vibe_gift      DateTime?
  spam_percent        Int?

  reported_posts_me   Int? 
  sus_start_date      DateTime?
  has_reported_u      Int?  

  explicit_posts      Int?
  has_marked_exp      Int? 
  thought_limit       Int? 
  comment_limit       Int?  
  first_login         Boolean? // enforce non-optional list make user make test post. might just use timestamp date & allow skip all 1st day
  timestamp           DateTime    @default(now())

  days                days[] @relation("userDays")  
  fields              fields? @relation("userFields")   // in case user doesn't want to post same fields they can have 1 field belong to user
  images              images[] @relation("userImages") 
  thoughts            thoughts[] @relation("userThoughts") 
  greatfullagain      greatfullagain? @relation("userGreatfullagain")  // not for stories but user can have 1 to show on profile.
  privacy             privacy? @relation("userPrivacy")        
  followers           followers[] @relation("userFollowers")       
  following           followers[] @relation("userFollowing")       
  blocks              blocks[] @relation("userBlocks") 
  blocked             blocks[] @relation("blockedUsers") 
  likes               likes[]  @relation("userLikes") 
  stars               stars[]  @relation("userStars") 
  listeners           listeners[] @relation("userListeners") 
  shares              shares[] @relation("userShares")
  suggestions         suggestions[] @relation("userSuggestions") 
  ballots             ballots[] @relation("ballotStartedByUser") 
                                      
  reactions           reactions[] @relation("userReactions") 

  fromNotifications   notifications[] @relation("userFromNotifications") 
  forNotifications    notifications[] @relation("userForNotifications")

  forMessages         messages[] @relation("userForMessages") 
  fromMessages        messages[] @relation("userFromMessages") 

  from_me_pay         payments[] @relation("fromUserPayments")
  for_me_pay          payments[] @relation("forUserPayments")

  from_me_prank       pranks[] @relation("userPranks")
  for_me_prank        pranks[] @relation("userPranked")

  algo_settings       algo_settings[] @relation("userAlgosettings")

  location            locations? @relation("locationUsers", fields: [location_id], references: [id])
  
  //                  mod                 mods @relation("modUsers", fields: [mod_id], references: [id])   // modUsers now M:M 
}

model days {            
  id                  Int      @id @default(autoincrement())
  user_id             Int?     
  category_name       String?
  location_id         Int?    
  report_id           Int?  
  title               String?  
  caption             String?
  
  non_anonymous       String  
  thoughts_ok         String             
  shareable           String     
  downloadable        String     

  is_reported         Boolean?    
  is_in_trash         Boolean?
  trash_tally         Int?
  rlly                String?     
  feedface            String 
  date                DateTime?
  lock_restriction    String?
  lock_activity       String?
  sus_content         Boolean?
  timestamp           DateTime  @default(now()) 

  thoughts            thoughts[] @relation("dayThoughts") 
  fields              fields? @relation("dayFields")
  moments             moments? @relation("dayMoments") 
  images              images[] @relation("dayImages")
  greatfullagain      greatfullagain? @relation("dayGreatfullagain") 
  likes               likes[]  @relation("dayLikes") 
  reactions           reactions[] @relation("dayReactions")
  listeners           listeners[] @relation("dayListeners")
  notifications       notifications[] @relation("dayNotifications")
  ballots             ballots[] @relation("dayBallot")
  shares              shares[] @relation("dayShares")
  payments            payments[] @relation("dayPayments")
  pranks              pranks[] @relation("dayPranks")
  
  user                users?  @relation("userDays", fields: [user_id], references: [id])  

  category            categories?  @relation("categoryDays", fields: [category_name], references: [name]) 
  location            locations? @relation("locationDays", fields: [location_id], references: [id])

  sleep_id            Int?
  were_id             Int?
}

model thoughts {          
  id                  Int      @id @default(autoincrement())
  user_id             Int?      // not optional but handled logic side: circular dependency if it's optional during user create.
  day_id              Int?
  category_id         String?
  parent_thought_id   Int?     
  moment_id           Int?
  greatfullagain_id   Int?
  field_id            Int?
  habit_id            Int?
  location_id         Int?
  sus_content         Boolean?
  suggestion_id       Int?
  share_id            Int?
  feedgame_id         Int?
  meme_id             Int?
  title               String?
  thought             String?
  thoughts            String[] @default([])

  non_anonymous       String
  downloadable        String
  starrable           String    
  thoughts_ok         String
  
  is_reported         Boolean?    
  is_in_trash         Boolean?
  trash_tally         Int?      
  date                String?
  on_profile          String?            
  timestamp           DateTime @default(now())

  user                users?  @relation("userThoughts", fields: [user_id], references: [id])   
  days                days? @relation("dayThoughts", fields: [day_id], references: [id])      
  location            locations? @relation("locationThoughts", fields: [location_id], references: [id])

  parent_thought      thoughts? @relation("parentThoughts", fields: [parent_thought_id], references: [id])
  child_thoughts      thoughts[] @relation("parentThoughts")

  moment              moments? @relation("momentThoughts", fields: [moment_id], references: [id])
  greatfullagain      greatfullagain? @relation("greatfullagainThoughts", fields: [greatfullagain_id], references: [id])
  field               fields? @relation("fieldThoughts", fields: [field_id], references: [id])
  suggestion          suggestions? @relation("suggestionThoughts", fields: [suggestion_id], references: [id])
  feedgame            feedgames? @relation("feedgameThoughts", fields: [feedgame_id], references: [id])
  share               shares[] @relation("thoughtShares")

  stars               stars[]  @relation("thoughtStars") 
  notifications       notifications[] @relation("thoughtNotifications")
  images              images[] @relation("thoughtImages")
}

model moments {       
  id                  Int      @id @default(autoincrement())
  // user_id             Int?           // doesn't need user_id.. if there are stories there are stories but doesn't belong to user.
  day_id              Int?     @unique
  moment              String?
  moments             String[] @default([])
  on_profile          String?
  timestamp           DateTime @default(now())
  
  day                 days? @relation("dayMoments", fields: [day_id], references: [id])
  thought             thoughts[] @relation("momentThoughts") 
  notification        notifications[] @relation("momentNotifications")

  images              images[] @relation("momentImages")
}

model greatfullagain {     
  id                  Int      @id @default(autoincrement())
  user_id             Int?     
  day_id              Int?     @unique 
  concern             String?
  question            String?
  criticism           String?
  words               String[] @default([])
  greatfull           String[] @default([])
  on_profile          String?
  show_cgc            String?
  timestamp           DateTime @default(now())  

  user                users? @relation("userGreatfullagain", fields: [user_id], references: [id])
  day                 days? @relation("dayGreatfullagain", fields: [day_id], references: [id])
  
  thoughts            thoughts[] @relation("greatfullagainThoughts")  
  images              images[] @relation("greatfullagainImages")       
  myconcerns          myconcerns? @relation("greatfullagainMyConcern")     
  myquestions         myquestions? @relation("greatfullagainMyQuestion")   
  mycriticisms        mycriticisms? @relation("greatfullagainMyCriticism")                         
}

model fields {                                                                                                                       
  id                  Int      @id @default(autoincrement())
  user_id             Int?      // this is not for "model stories{}" it's so a user can create their usually-set fields.
  day_id              Int?     @unique
  decidedo_id         Int? 
  nickname            String?         // like weekend fields. rave fields. lose weight fields. code sprint fields.
  fields              String[] @default([])
  checkbox            Boolean[] @default([])
  text                String[] @default([])
  decide              String?     
  do                  String? 
  dream               String?   
  likeable            String
  thoughts_ok         String      
  on_profile          String?
  timestamp           DateTime @default(now())       
   
  user                users? @relation("userFields", fields: [user_id], references: [id])
  day                 days? @relation("dayFields", fields: [day_id], references: [id])

  algo_settings       algo_settings[] @relation("fieldAlgosettings")
  like                likes[] @relation("fieldLikes")
  share               shares[] @relation("fieldShares")     
  thoughts            thoughts[] @relation("fieldThoughts")  
  images              images[] @relation("fieldImages")
  myhabits            myhabits[] @relation("fieldMyHabits")
  myvalues            myvalues[] @relation("fieldMyValues")
  decidedo            decidedo? @relation("decideDoFields", fields: [decidedo_id], references: [id])     
}

model ourconcerns {
  id                  Int      @id @default(autoincrement())
  concern             String
  timestamp           DateTime @default(now())         

  myconcerns          myconcerns[] @relation("ourConcernConcerns")

  //                  ballots             ballots[] @relation("ourConcernBallots")
}

model myconcerns {
  id                  Int      @id @default(autoincrement())
  user_id             Int         
  greatfullagain_id   Int      @unique
  ourconcern_id       Int?
  concern             String?
  
  timestamp           DateTime @default(now())    
  
  greatfullagain      greatfullagain @relation("greatfullagainMyConcern", fields: [greatfullagain_id], references: [id]) 
  ourconcerns         ourconcerns? @relation("ourConcernConcerns", fields: [ourconcern_id], references: [id])

  //                  algo_settings       algo_settings[] @relation("myConcernAlgosettings")
}

model ourquestions {
  id                  Int      @id @default(autoincrement())
  question            String
  timestamp           DateTime @default(now())       

  myquestions         myquestions[] @relation("ourQuestionQuestions")
  ballots             ballots[] @relation("ourQuestionBallots")
}

model myquestions {
  id                  Int      @id @default(autoincrement())
  user_id             Int         
  greatfullagain_id   Int      @unique
  ourquestion_id      Int?
  concern             String?
  
  timestamp           DateTime @default(now())    
  
  greatfullagain      greatfullagain @relation("greatfullagainMyQuestion", fields: [greatfullagain_id], references: [id]) 
  ourquestions        ourquestions? @relation("ourQuestionQuestions", fields: [ourquestion_id], references: [id])
  algo_settings       algo_settings[] @relation("myQuestionAlgosettings")
}

model ourcriticisms {
  id                  Int      @id @default(autoincrement())
  criticism           String  
  timestamp           DateTime @default(now())       

  mycriticisms        mycriticisms[] @relation("ourCriticismCriticisms")
  ballots             ballots[] @relation("ourCriticismBallots")
}

model mycriticisms {
  id                  Int      @id @default(autoincrement())
  user_id             Int         
  greatfullagain_id   Int      @unique
  ourcriticism_id     Int?
  criticism           String?
  
  timestamp           DateTime @default(now())    
  
  greatfullagain      greatfullagain @relation("greatfullagainMyCriticism", fields: [greatfullagain_id], references: [id]) 
  ourcriticism        ourcriticisms? @relation("ourCriticismCriticisms", fields: [ourcriticism_id], references: [id])
  algo_settings       algo_settings[] @relation("myCriticismAlgosettings")
}

model decidedo {        
  id                  Int      @id @default(autoincrement()) @unique
  fields_id           Int      
  decide              String
  doings              String[] @default([])      
  zoom_in             String?      
  zoom_out            String?     
  timestamp           DateTime @default(now())

  field               fields[] @relation("decideDoFields")  
}

model payments {      
  id                  Int      @id @default(autoincrement())
  from_user_id        Int?
  for_user_id         Int?
  is_app_payment      Boolean
  day_id              Int?
  location_id         Int?
  last_4              Int
  ip_addy             String  
  notes               String        
  amount              Int
  currency            String
  timestamp           DateTime @default(now())

  from_me_pay         users? @relation("fromUserPayments", fields: [from_user_id], references: [id])
  for_me_pay          users? @relation("forUserPayments", fields: [for_user_id], references: [id])
  day                 days?  @relation("dayPayments", fields: [day_id], references: [id])
  location            locations? @relation("locationPayments", fields: [location_id], references: [id])
  notifications       notifications[] @relation("paymentNotifications")
}

model pranks {
  id                  Int      @id @default(autoincrement())
  pranked_by_id       Int?  
  pranked_user_id     Int?
  day_id              Int? 
  prank               String  
  active              Boolean  
  timestamp           DateTime @default(now())

  prankster           users? @relation("userPranks", fields: [pranked_by_id], references: [id])
  pranked             users? @relation("userPranked", fields: [pranked_user_id], references: [id])

  day                 days? @relation("dayPranks", fields: [day_id], references: [id])
  notifications       notifications[] @relation("prankNotifications")
}

model algo_settings {     
  id                  Int      @id @default(autoincrement())
  user_id             Int?      
  hashtag_id          Int?
  location_id         Int?
  layout              String? 
  concern_id          Int?
  question_id         Int?
  criticism_id        Int?
  field_id            Int?
  category            String?

  nickname            String?
  include_words       String[]
  exclude_words       String[]
  gender              String? 
  engaged_percent     Int? 
  verified            String?
  trash_percent       Int?
  reactions           String? 
  anonymous_percent   Int? 
  is_anonymous        String?
  after_join_date     String?
  post_percent        Int?       
  feedgame_percent    Int?    
  spam_percent        Int?
  timestamp           DateTime @default(now())

  user                users? @relation("userAlgosettings", fields: [user_id], references: [id])
  hashtag             hashtags? @relation("hashtagAlgosettings", fields: [hashtag_id], references: [id])
  location            locations? @relation("locationAlgosettings", fields: [location_id], references: [id])
  myconcern           myconcerns? @relation("myConcernAlgosettings", fields: [concern_id], references: [id])
  myquestion          myquestions? @relation("myQuestionAlgosettings", fields: [question_id], references: [id])
  mycriticism         mycriticisms? @relation("myCriticismAlgosettings", fields: [criticism_id], references: [id])

  field               fields? @relation("fieldAlgosettings", fields: [field_id], references: [id])
  category_id         categories? @relation("categoryAlgosettings", fields: [category], references: [name])
}

model hashtags {        
  id                  Int      @id @default(autoincrement())
  tag                 String? 
  location_id         Int? 
  no_db_loc           String?  

  timestamp           DateTime @default(now())

  algo_settings       algo_settings[] @relation("hashtagAlgosettings")
  location            locations? @relation("locationHashtags", fields: [location_id], references: [id])
}


model locations {   
  id                  Int      @id @default(autoincrement())
  nickname            String?  @unique
  city                String?
  zip_code            Int?
  country             String?
  timestamp           DateTime @default(now())

  users               users[] @relation("locationUsers")
  days                days[] @relation("locationDays")
  thoughts            thoughts[] @relation("locationThoughts")
  zipcodes            zipcodes[] @relation("locationZipcodes")

  payments            payments[] @relation("locationPayments")
  hashtags            hashtags[] @relation("locationHashtags")
  algo_settings       algo_settings[] @relation("locationAlgosettings")
}

model zipcodes {
  id                  Int      @id @default(autoincrement())
  location_id         Int
  zipcode             Int 
  timestamp           DateTime @default(now())
  location            locations @relation("locationZipcodes", fields: [location_id], references: [id])
}

model listeners {
  id                  Int      @id @default(autoincrement())
  day_id              Int? // non optional but enforcing on client to avoid circular dependency. 
  user_id             Int? // fixing circular dependency issue by making these fields optional
  still_listening     Boolean // have to add something because it's an empty prisma.listeners.create() statement if not. 
  timestamp           DateTime @default(now())

  day                 days? @relation("dayListeners", fields: [day_id], references: [id])
  user                users? @relation("userListeners", fields: [user_id], references: [id])  
  notifications       notifications[] @relation("listenerNotifications")
}

model vibes {        
  id                  Int      @id @default(autoincrement())
  for_user            Int
  from_user           Int
  day_id              Int
  timestamp           DateTime @default(now())

  notification        notifications[] @relation("vibeNotifications") 
}

model images {
  id                  Int      @id @default(autoincrement())
  user_id             Int?
  day_id              Int?
  thought_id          Int?
  moment_id           Int?
  field_id            Int?
  greatfullagain_id   Int?

  image_tag           String
  timestamp           DateTime @default(now())

  user                users? @relation("userImages", fields: [user_id], references: [id])    
  day                 days? @relation("dayImages", fields: [day_id], references: [id])
  thought             thoughts? @relation("thoughtImages", fields: [thought_id], references: [id])
  moment              moments? @relation("momentImages", fields: [moment_id], references: [id])
  field               fields? @relation("fieldImages", fields: [field_id], references: [id])
  greatfullagain      greatfullagain? @relation("greatfullagainImages", fields: [greatfullagain_id], references: [id])
}

model followers {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  follower_id        Int
  timestamp          DateTime @default(now())

  user               users  @relation("userFollowers", fields: [user_id], references: [id])
  follower           users  @relation("userFollowing", fields: [follower_id], references: [id])  

  notification       notifications[] @relation("followersNotifications")
}

model likes {
  id                 Int      @id @default(autoincrement())
  liked_by_id        Int?
  day_id             Int?
  thought_id         Int?
  feedgame_id        Int?
  message_id         Int?
  field_id           Int?
  habit              String?

  is_like            Boolean?
  is_dislike         Boolean?
  rlly               String? 
  timestamp          DateTime @default(now())

  liked_by           users? @relation("userLikes", fields: [liked_by_id], references: [id])    
  days               days? @relation("dayLikes", fields: [day_id], references: [id])      
  
  feedgame           feedgames? @relation("feedgameLikes", fields: [feedgame_id], references: [id])
  message            messages? @relation("messageLikes", fields: [message_id], references: [id])  
  field              fields? @relation("fieldLikes", fields: [field_id], references: [id])

  notification       notifications[] @relation("likeNotifications")
}

model stars {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  thought_id         Int?
  message_id         Int?
  suggestion_id      Int?

  stars              Int
  timestamp          DateTime @default(now())

  user               users @relation("userStars", fields: [user_id], references: [id])
  thought            thoughts? @relation("thoughtStars", fields: [thought_id], references: [id])
  suggestion         suggestions? @relation("suggestionStars", fields: [suggestion_id], references: [id])
  message            messages? @relation("messageStars", fields: [message_id], references: [id])
  notification       notifications[] @relation("starNotifications")  
}

model reactions {
  id                 Int      @id @default(autoincrement())
  user_id            Int?
  day_id             Int?
  feedgame_id        Int?
  message_id         Int?
  value_id           Int?
  habit_id           Int?
  meme_id            Int?  
  reaction           String  
  timestamp          DateTime @default(now())

  user               users?  @relation("userReactions", fields: [user_id], references: [id])
  day                days? @relation("dayReactions", fields: [day_id], references: [id])
  feedgame           feedgames? @relation("feedgameReactions", fields: [feedgame_id], references: [id])
  message            messages? @relation("messageReactions", fields: [message_id], references: [id])  

  notification       notifications[] @relation("reactionNotifications")
}

model categories {    
  name               String   @id
  timestamp          DateTime @default(now())
  
  mods               mods[] @relation("categoryMods")
  day                days[] @relation("categoryDays")
  algo_settings      algo_settings[] @relation("categoryAlgosettings")
}

model mods {
  id                Int      @id @default(autoincrement())
  category_name     String
  user_id           Int  
  timestamp         DateTime @default(now())

  category          categories @relation("categoryMods", fields: [category_name], references: [name])
  //                user              users @relation("modUsers", fields: [user_id], references: [id]) // users:mods M:M now but limit to 2
}

model privacy {         
  id                Int      @id @default(autoincrement())
  user_id           Int      @unique       
  private           Boolean
  share_data        Boolean?
  prankable         Boolean?      
  opt_in_feedgame   Boolean?   
  show_history      Boolean 
  can_msg           String  
  anon_msg          String
  can_mention       String?   // might not be launching.. 1/7 idea. might be bool too..could be too hard to enforce w/ string
  timestamp         DateTime @default(now())  

  users             users @relation("userPrivacy", fields: [user_id], references: [id])  
}

model reportedcontent {
  id                Int      @id @default(autoincrement())
  reported_user     Int
  reporting_user    Int

  day_id            Int?
  thought_id        Int?
  suggestion_id     Int?
  why               String?
  status            String?
  notes             String?
  timestamp         DateTime @default(now())

  notification      notifications[] @relation("reportNotifications") 
}

model showsuscontentusers {       
  id                Int      @id @default(autoincrement())
  thought_id        Int?
  day_id            Int?
  scroll_user_id    Int
  timestamp         DateTime @default(now())
}

model blocks {
  id                Int      @id @default(autoincrement())
  user_id           Int
  blocked_id        Int
  feedback          String?
  notes             String?  
  timestamp         DateTime @default(now())

  user              users  @relation("userBlocks", fields: [user_id], references: [id])
  blocked           users  @relation("blockedUsers", fields: [blocked_id], references: [id])
}

model notifications {
  id                Int      @id @default(autoincrement())
  from_user_id      Int?
  for_user_id       Int?
  from_app          Boolean?
  day_id            Int?
  listener_id       Int?
  thought_id        Int?
  moment_id         Int?
  like_id           Int?
  star_id           Int?
  reaction_id       Int?
  ballot_id         Int?
  message_id        Int?
  user_pass_lock_id Int?
  user_feedgame_id  Int?

  vibe_id           Int?
  payment_id        Int?
  prank_id          Int?
  follower_id       Int?
  report_id         Int?
  feedgame_id       Int?
  share_id          Int?
  
  favorite_id       Int?

  is_read           Boolean
  is_request        Boolean?
  type              String?
  timestamp         DateTime @default(now())

  from              users?  @relation("userFromNotifications", fields: [from_user_id], references: [id])
  for               users?  @relation("userForNotifications", fields: [for_user_id], references: [id])

  day               days? @relation("dayNotifications", fields: [day_id], references: [id])
  thought           thoughts?  @relation("thoughtNotifications", fields: [thought_id], references: [id])
  moment            moments?  @relation("momentNotifications", fields: [moment_id], references: [id])
  listener          listeners? @relation("listenerNotifications", fields: [listener_id], references: [id])
  like              likes? @relation("likeNotifications", fields: [like_id], references: [id])
  star              stars? @relation("starNotifications", fields: [star_id], references: [id])
  reaction          reactions? @relation("reactionNotifications", fields: [reaction_id], references: [id])
  ballot            ballots? @relation("ballotNotifications", fields: [ballot_id], references: [id])
  message           messages? @relation("messageNotifications", fields: [message_id], references: [id])
  vibe              vibes? @relation("vibeNotifications", fields: [vibe_id], references: [id])
  payment           payments? @relation("paymentNotifications", fields: [payment_id], references: [id])
  prank             pranks? @relation("prankNotifications", fields: [prank_id], references: [id])
  follower          followers? @relation("followersNotifications", fields: [follower_id], references: [id])
  report            reportedcontent? @relation("reportNotifications", fields: [report_id], references: [id])
  feedgame          feedgames? @relation("feedgameNotifications", fields: [feedgame_id], references: [id])
  userPassLock      user_pass_day_locks? @relation("userPassLocksNotifications", fields: [user_pass_lock_id], references: [id])
  userPlayFeedGame  user_play_feed_games? @relation("userPlayFeedGamesNotifications", fields: [user_feedgame_id], references: [id])
  share             shares? @relation("shareNotifications", fields: [share_id], references: [id])
}

model messages {
  id                Int      @id @default(autoincrement())
  user_id           Int
  from_id           Int
  msg               String
  non_anonymous     Boolean
  timestamp         DateTime @default(now())

  notification      notifications[] @relation("messageNotifications")
  reaction          reactions[] @relation("messageReactions")
  like              likes[] @relation("messageLikes")
  stars             stars[] @relation("messageStars")

  user              users  @relation("userForMessages", fields: [user_id], references: [id])
  from              users  @relation("userFromMessages", fields: [from_id], references: [id])
}

model feedgames {
  id                Int      @id @default(autoincrement())
  gametype          String
  timestamp         DateTime @default(now())

  thought           thoughts[] @relation("feedgameThoughts")
  like              likes[] @relation("feedgameLikes")              
  reaction          reactions[] @relation("feedgameReactions")       

  notification      notifications[] @relation("feedgameNotifications")  
  ballot            ballots[] @relation("feedgameBallot") 
}

model shares {
  id                Int      @id @default(autoincrement())
  day_id            Int?
  thought_id        Int?
  field_id          Int?
  sharer_id         Int?
  timestamp         DateTime @default(now())

  
  day               days? @relation("dayShares", fields:[day_id], references: [id])
  thought           thoughts? @relation("thoughtShares", fields: [thought_id], references: [id])
  field             fields? @relation("fieldShares", fields: [field_id], references: [id])
  sharer            users? @relation("userShares", fields: [sharer_id], references: [id])
  
  notifications      notifications[] @relation("shareNotifications") 
}

model ourhabits {    
    id              Int      @id @default(autoincrement())  
    habit           String   @unique
    timestamp       DateTime @default(now())          

    myhabits        myhabits[] @relation("ourHabitHabits")
    ballots         ballots[] @relation("ourHabitBallots")
}

model myhabits {
    id              Int      @id @default(autoincrement())  
    user_id         Int
    field_id        Int?
    ourhabit_id     Int?
    habit           String? 

    start           String[] @default([])
    stop            String[] @default([])
    active          Boolean? 
    notes           String?
    timestamp       DateTime @default(now())

    field           fields? @relation("fieldMyHabits", fields: [field_id], references: [id])
    ourhabits       ourhabits? @relation("ourHabitHabits", fields: [ourhabit_id], references: [id])  
}

model ourvalues {    
    id              Int      @id @default(autoincrement())  
    value           String   @unique
    timestamp       DateTime @default(now())          
    
    ballots         ballots[] @relation("ourValueBallots")

    myvalues        myvalues[] @relation("ourValueValues")
}

model myvalues {
    id              Int      @id @default(autoincrement())  
    user_id         Int
    field_id        Int?
    ourvalue_id     Int?
    value           String?    
    notes           String?
    timestamp       DateTime @default(now())

    field           fields? @relation("fieldMyValues", fields: [field_id], references: [id])
    ourvalues       ourvalues? @relation("ourValueValues", fields: [ourvalue_id], references: [id])    
}

model suggestions {
    id              Int       @id @default(autoincrement())
    suggested_by    Int
    suggestion      String
    notes           String?
    non_anonymous   Boolean
    timestamp       DateTime @default(now())
    
    user            users @relation("userSuggestions", fields: [suggested_by], references: [id])
    
    thought         thoughts[] @relation("suggestionThoughts")
    stars           stars[] @relation("suggestionStars")
    ballot          ballots[] @relation("suggestionBallot")    
}

model ballots {
    id              Int       @id @default(autoincrement())
    feedgames_id    Int?        
    day_id          Int?    
    started_by_id   Int?
    suggestion_id   Int?
    ourconcern_id   Int?
    ourquestion_id  Int?
    ourcriticism_id Int?
    ourhabit_id     Int?
    ourvalue_id     Int?
    title           String?     
    description     String?
    decision        String?
    notes           String?
    option          String?
    restriction     String?
    options         String[] @default([])
    timestamp       DateTime @default(now())
    
    feedgames       feedgames? @relation("feedgameBallot", fields: [feedgames_id], references: [id])
    day             days? @relation("dayBallot", fields: [day_id], references: [id])
    suggestion      suggestions? @relation("suggestionBallot", fields: [suggestion_id], references: [id])
    ourconcern      ourconcerns? @relation("ourConcernBallots", fields: [ourconcern_id], references: [id])
    ourquestion     ourquestions? @relation("ourQuestionBallots", fields: [ourquestion_id], references: [id])
    ourcriticism    ourcriticisms? @relation("ourCriticismBallots", fields: [ourcriticism_id], references: [id])
    ourhabit        ourhabits? @relation("ourHabitBallots", fields: [ourhabit_id], references: [id])
    ourvalue        ourvalues? @relation("ourValueBallots", fields: [ourvalue_id], references: [id])

    user            users? @relation("ballotStartedByUser", fields: [started_by_id], references: [id])
    votes           votes[] @relation("ballotVotes")
    notifications   notifications[] @relation("ballotNotifications")
}

model votes {  
  id                Int       @id @default(autoincrement())
  ballot_id         Int?
  user_id           Int?    // ... circular dependency but won't be taking votes without users. M:M so no mention of table. 
  vote              Int
  timestamp         DateTime @default(now())
  
  ballot            ballots? @relation("ballotVotes", fields: [ballot_id], references: [id])
                    // no association for user since it's M:M? 
}

model hashtagged_content {
  id                Int      @id @default(autoincrement())    
  user_id           Int
  hashtag_id        Int
  day_id            Int?
  thought_id        Int?
  category          String?
  timestamp         DateTime @default(now())
}

model trash {
  id                Int      @id @default(autoincrement())  
  trashed_by_id     Int
  day_id            Int?
  thought_id        Int?
  trashed_count     Int  
  is_in_trash       Boolean
  timestamp         DateTime @default(now())
 }

model user_play_feed_games {
  id                Int      @id @default(autoincrement())
  feedgames_id      Int
  playing_user_id   Int
  user_1_id         Int?
  user_2_id         Int?
  user_3_id         Int?
  user_4_id         Int?
  day_1_id          Int?
  day_2_id          Int? 
  day_3_id          Int?
  day_4_id          Int?
  option_a          String?
  option_b          String?
  option_c          String?
  option_d          String?
  right_answer      String
  wrong_guess       Int
  result            String?
  timestamp         DateTime @default(now())

  notifications      notifications[] @relation("userPlayFeedGamesNotifications")
} 


model mentions {
  id                Int      @id @default(autoincrement())
  menionted_by_id   Int
  mentioned_user_id Int
  day_id            Int?
  thought_id        Int?
  moment_id         Int?
  greatfullagain_id Int?
  field_id          Int?
}

model user_pass_day_locks {      
  id                  Int      @id @default(autoincrement())
  day_id              Int
  user_id             Int
  timestamp           DateTime @default(now())

  notifications       notifications[] @relation("userPassLocksNotifications")
}